#include "Overlook.h"
using namespace Overlook;

NAMESPACE_UPP

INITBLOCK {
	
	
	// Generic ctrls
	
	// BASESYSTEM MUST BE FIRST TO REGISTER ALWAYS
	Factory::Register<BaseSystem, BaseSystemCtrl>("Base system");
	
	
	
	
	
	// Cores and ctrls...
	
	// Register slots in correct dependency order!!!
	// Earlier (upper) slots can't find later registered (lower) slots as inputs!!!
	
	Factory::Register<DataBridge, GraphGroupCtrl>("DataBridge");
	Factory::Register<VirtualNode, GraphGroupCtrl>("VirtualNode");
	Factory::Register<SymbolSource, GraphGroupCtrl>("SymbolSource");
	
	Factory::Register<BridgeAskBid, GraphGroupCtrl>("BridgeAskBid");
	Factory::Register<SpreadStats, GraphGroupCtrl>("Spread Statistics");
	Factory::Register<ValueChange, GraphGroupCtrl>("Change of data-values");
	Factory::Register<IdealOrders, GraphGroupCtrl>("Ideal order signal");
	
	
	Factory::Register<MovingAverage, GraphGroupCtrl>("Moving average");
	
	Factory::Register<WdayHourStats, GraphGroupCtrl>("WdayHour statistics");
	Factory::Register<WdayHourDiff, GraphGroupCtrl>("WdayHour slow/fast difference");
	Factory::Register<ChannelPredicter, GraphGroupCtrl>("Max/Min channel predicter");
	Factory::Register<EventOsc, GraphGroupCtrl>("Known event intensity oscillator");
	
	
	Factory::Register<QueryTableForecaster, ForecasterCtrl>("QueryTable forecaster");
	
	Factory::Register<QueryTableHugeForecaster, ForecasterCtrl>("Huge QueryTable forecaster");
	
	Factory::Register<QueryTableMetaForecaster, ForecasterCombCtrl>("QueryTable meta-forecaster");
	
	Factory::Register<QueryTableAgent, AgentCtrl>("QueryTable agent");
	
	Factory::Register<QueryTableHugeAgent, AgentCtrl>("Huge QueryTable agent");
	
	Factory::Register<QueryTableMetaAgent, AgentCombCtrl>("QueryTable meta-agent");
	
	Factory::Register<QueryTableDoubleAgent, AgentCombCtrl>("QueryTable double-agent");
	
	/*
	Factory::Register<AutoEncoder>();
	Factory::Register<Recurrent>();
	Factory::Register<::Factory::NARX>();
	Factory::Register<Forecaster>();
	Factory::Register<ClassifierAgent>();
	Factory::Register<RLAgent>();
	Factory::Register<::Factory::DQNAgent>();
	Factory::Register<MonaAgent>();
	Factory::Register<MonaMetaAgent>();
	Factory::Register<MonaDoubleAgent>();
	*/
	int c = Factory::GetFactoryInputs().GetCount();
	ASSERT(Factory::GetFactoryInputs().GetCount());
}

END_UPP_NAMESPACE
